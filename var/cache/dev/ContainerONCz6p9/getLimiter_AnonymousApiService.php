<?php

namespace ContainerONCz6p9;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getLimiter_AnonymousApiService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'limiter.anonymous_api' shared service.
     *
     * @return \Symfony\Component\RateLimiter\RateLimiterFactory
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/rate-limiter/RateLimiterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/rate-limiter/Storage/StorageInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/rate-limiter/Storage/CacheStorage.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/LockFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/PersistingStoreInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/Store/StoreFactory.php';

        $a = new \Symfony\Component\Lock\LockFactory(\Symfony\Component\Lock\Store\StoreFactory::createStore($container->getEnv('LOCK_DSN')));
        $a->setLogger(($container->privates['logger'] ?? ($container->privates['logger'] = new \Symfony\Component\HttpKernel\Log\Logger())));

        return $container->privates['limiter.anonymous_api'] = new \Symfony\Component\RateLimiter\RateLimiterFactory(['policy' => 'sliding_window', 'limit' => 10, 'interval' => '1 minute', 'id' => 'anonymous_api'], new \Symfony\Component\RateLimiter\Storage\CacheStorage(($container->services['cache.rate_limiter'] ?? $container->load('getCache_RateLimiterService'))), $a);
    }
}
